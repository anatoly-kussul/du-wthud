name: WT Pilot v0.7.0.beta9-SA
pvp: true

slots:
    core:
        class: CoreUnit
    shield:
        class: ShieldGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    spacefueltank:
        class: SpaceFuelContainer
        select: manual
    atmofueltank:
        class: AtmoFuelContainer
        select: manual
    rocketfueltank:
        class: RocketFuelContainer
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    db:
        class: DatabankUnit
        select: manual

handlers:
    unit:
        onStart:
            lua: |
                showARCompass = true --export
                holdBrakeOnInit = true --export
                autoRes = true --export
                autoResMode = 1 --export
                autoResMinHitCount = 0 --export
                shieldDebugLog = false --export
                maxAngularSpeed = 0 --export
                brakeToggle = false --export
                burnLimiter = true --export
                burnLimiterSpeed = 0 --export
                defaultHoverAltitude = 4 --export
                showGuiOutline = true --export
                airfoilTorque = false --export
                showAtmoRelatedButtons = true --export
                showShieldRelatedButtons = true --export
                targetLandingSpeed = -2 --export
                
                Nav = Navigator.new(self.system, self.core, self.unit)
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                dampingOff = 0
                autoLevel = 0
                altitudeHold = nil
                groundStabilization = true
                screenHeight = system.getScreenHeight()
                screenWidth = system.getScreenWidth()
                brakeInput = 0
                landingMode = false
                manualVerticalInput = false

                if holdBrakeOnInit and vec3(construct.getWorldVelocity()):len()<100 then
                    brakeInput = 1
                    groundStabilization = false
                    local curAlt = core.getAltitude()
                    if curAlt ~= nil and curAlt ~= 0 then
                        landingMode = true
                        unit.deployLandingGears()
                    end
                else
                    unit.retractLandingGears()
                end

                function shieldClass(a,b,c,d,e,f,g)if d==nil then d=true end;if g==nil then g=false end;local h={}local i={MAX=0,MAX2=1,RATIO=2}e=e or i.MAX2;f=f or 0;local j=nil;local k={0,0,0,0}local l=c.getResistances()local m={0,0,0,0}local n=1;local o=30;local p={}for q=1,o do p[#p+1]={0,0,0,0}end;local r={0,0,0,0}local s=0;local t=0;local u=0.0001;local v={}for q=1,120 do v[q]=c.getShieldHitpoints()/c.getMaxShieldHitpoints()end;local w={"AM","EM","KI","TH"}local function x(y,z)z=z or 1;local A=0;for q=1,#y do A=A+y[q]end;if A==0 then return{0,0,0,0}end;local B={}for q=1,#y do B[q]=y[q]/A*z end;return B end;local function C(D)local E={0,0,0,0}for F,G in ipairs(D)do for q,H in ipairs(G)do E[q]=E[q]+H end end;return E end;local function I(J)local K={}local L=#J;for q=1,L do K[q]=q end;local M=false;repeat M=false;for q=2,L do if J[K[q-1]]<J[K[q]]then K[q-1],K[q]=K[q],K[q-1]M=true end end until not M;return table.unpack(K)end;local function N(G,O)local P,Q,R,S=I(G)if G[P]>O*3 then G[P]=G[P]-O*3 end;G[Q]=G[Q]G[R]=G[R]+O*1;G[S]=G[S]+O*2 end;local function T(U)local V={}for q=1,#U do local W=U[q]if not V[W]then V[W]=true else return true end end;return false end;local function X(U,Y)for q=1,#U do if math.abs(U[q]-Y[q])>u/10 then return false end end;return true end;local function Z(_)local a0={0,0,0,0}local a1=I(_)a0[a1]=1;return a0 end;local function a2(_)local a0={0,0,0,0}local a3,a4=I(_)a0[a3]=1;if _[a4]>1 and _[a4]/_[a3]>0.3 then a0[a4]=1 end;return a0 end;local function a5(a6)local a7=x(a6,c.getResistancesPool())N(a7,u)if X(a7,l)or c.getResistancesCooldown()>0 then return end;local a8=c.setResistances(table.unpack(a7))if not a8 then a.print('wtShield ERROR (code: 4) ('..table.concat(a7,",")..')')else l=a7;a.print('Successfuly applied resistances ('..table.concat(a7,",")..')')end end;local function a9()if c.getResistancesCooldown()~=0 or X(r,{0,0,0,0})then return end;local a0;if e==i.MAX then a0=Z(r)elseif e==i.MAX2 then a0=a2(r)elseif e==i.RATIO then a0=k else a0={0.25,0.25,0.25,0.25}a.print('wtShield ERROR (code: 3)')end;a5(a0)end;function h.onDown()c.startVenting()end;function h.onVentingEvent(aa,ab)if not aa then c.activate()end end;function h.toogleAutoRes()d=not d;if d then j=nil end;a.print('AutoRes '..(d and'ON'or'OFF'))end;function h.manualOverride(a7)d=false;j=a7;a.print('AutoRes OFF, setting manual res to '..table.concat(a7,", "))end;function h.onAbsorb(ac,ad)local ae=0.9-ac/ad;local af;for q=1,#l do if math.abs(ae-l[q])<u/10 then if not af then af=q else a.print('wtShield ERROR (code: 1)')return end end end;if not af then a.print('wtShield ERROR (code: 2)')return end;if g then a.print('HIT '..w[af]..' '..ad)end;local ag=a.getUtcTime()t=t+1;m[af]=ag;p[#p][af]=p[#p][af]+ad;r=C(p)k=x(r)end;function h.onTick()local ag=a.getUtcTime()if d and t>0 and(f==0 or t>=f)and ag-math.max(table.unpack(m))<o*n*0.8 then a9()end;if j then a5(j)end;s=t;table.remove(p,1)p[#p+1]={0,0,0,0}r=C(p)k=x(r)if X(r,{0,0,0,0})then t=0 end;table.remove(v,1)v[120]=c.getShieldHitpoints()/c.getMaxShieldHitpoints()end;function h.getStressRatio()return k end;function h.getLastHitTimes()return m end;function h.getShieldHistory()return v end;function h.getAutoRes()return d end;function h.getAutoResModeStr()if not d then return'OFF'elseif e==0 then return'MAX'elseif e==1 then return'MAX2'elseif e==2 then return'RATIO'end end;a.print('currentRes: '..table.concat(l,", "))if d then a5({1,1,1,1})elseif T(l)then a.print('found equal resists, unequalizing...')a5(l)end;b.setTimer('wtShieldTick',n)return h end

                function audioManagerClass(a)local b={}local c={}function b.onUpdate()if a.isPlayingSound()then return end;if c[1]==nil then return end;a.playSound(c[1])table.remove(c,1)end;function b.playSound(d)table.insert(c,d)end;return b end;function monitorClass(a,e,f,g)local h={}local i;local j=audioManagerClass(a)local k=0.3;local l=0.1;local m=0.4;local n=0.1;local o=0.4;local p=0.1;local q="wthud/fuelLow.mp3"local r="wthud/fuelCritical.mp3"local s="wthud/shieldLow.mp3"local t="wthud/shieldCritical.mp3"local u="wthud/ccsLow.mp3"local v="wthud/ccsCritical.mp3"local w="wthud/targetAccelerating.mp3"local x="wthud/targetBraking.mp3"local function y()local z={}if sheild~=nil then z.shieldHpRatio=f.getShieldHitpoints()/f.getMaxShieldHitpoints()end;z.stressHpRatio=e.getMaxCoreStress()>0 and e.getCoreStress()/e.getMaxCoreStress()or 0;z.fuelPercent=g~=nil and g.getItemsVolume()/g.getMaxVolume()or 0;return z end;function h.onUpdate()local z=y()if f~=nil then if(i.shieldHpRatio or 0)>m and z.shieldHpRatio<=m then j.playSound(s)end;if(i.shieldHpRatio or 0)>n and z.shieldHpRatio<=n then j.playSound(t)end end;if i.stressHpRatio>o and z.stressHpRatio<=o then j.playSound(u)end;if i.stressHpRatio>p and z.stressHpRatio<=p then j.playSound(v)end;if i.fuelPercent>k and z.fuelPercent<=k then j.playSound(q)end;if i.fuelPercent>l and z.fuelPercent<=l then j.playSound(r)end;i=z;j.onUpdate()end;i=y()return h end

                if shield ~= nil then
                    wtShield = shieldClass(system, unit, shield, autoRes, autoResMode, autoResMinHitCount, shieldDebugLog)
                end
                wtMonitor = monitorClass(system, core, shield, spacefueltank_1)
                
                unit.hideWidget()
                if warpdrive ~= nil then warpdrive.showWidget() end
                system.showHelper(0)
                system.showScreen(1)
                
                function PilotHUDClass(a,b,c,d,e,f,g,h,i,j,l,m)local n={}local o="black"local p="#b6dbe7"local q="1"local r=[[
                <style>
                .ui {
                    color: ]]..p..[[;
                    font: Inconsolata, monospace;
                    font-family: monospace;
                    font-size: 0.75em;
                    font-weight: bold;
                    opacity: ]]..q..[[;
                    white-space: pre;
                    text-shadow: -1px -1px 0 ]]..o..[[, 1px -1px 0 ]]..o..[[, -1px 1px 0 ]]..o..[[, 1px 1px 0 ]]..o..[[;
                }
                .blue {
                    color: #5BD8FF;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                .red {
                    color: #FF5B72;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                .orange {
                    color: #fc934f;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                .yellow {
                    color: #fce94f;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                .green {
                    color: #72ff5b;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                </style>]]local s=0;local t=0;local u=nil;local v=nil;local w=require('atlas')local function x(y)local z=" *([+-]?%d+%.?%d*e?[+-]?%d*)"local A="::pos{"..z..","..z..","..z..","..z..","..z.."}"local B,C,D,E,F=string.match(y,A)if B==nil or C==nil or D==nil or E==nil or F==nil then a.print("Error converting POS")return vec3()end;if B=="0"and C=="0"then return vec3(D,E,F)end;E=math.rad(E)D=math.rad(D)local G=w[tonumber(B)][tonumber(C)]local H=math.cos(D)local I=vec3(H*math.cos(E),H*math.sin(E),math.sin(D))return vec3(G.center)+(G.radius+F)*I end;local function J(K)K=vec3(K)return"::pos{0,0,"..K.x..","..K.y..","..K.z.."}"end;local L={}local function M()if db_1~=nil and db_1.hasKey('AR')then local N=0;for k,O in pairs(json.decode(db_1.getStringValue('AR')))do L[k]=O;N=N+1 end;a.print('Loaded '..N..' AR marks from databank')end end;local function P()if db_1~=nil then db_1.setStringValue('AR',json.encode(L))a.print('saved AR marks to databank')end end;local function Q(K,R,S)L[R]={x(K),S}P()end;M()local T={}for U,V in pairs(w[0])do table.insert(T,V)end;local function W(X)X=X or 0;if X<1000 then return math.ceil(X)..'m'elseif X<1000*10 then return string.format("%.2fkm",X/1000)elseif X<1000*100 then return string.format("%.1fkm",X/1000)elseif X<1000*200*10 then return string.format("%.2fsu",X/1000/200)elseif X<1000*200*100 then return string.format("%.1fsu",X/1000/200)else return math.ceil(X/1000/200)..'su'end end;local function Y(K)local function Z(_,a0,a1)local a2=(a0-_):normalize()local a3=(a1-_):dot(a2)/a2:dot(a2)if a3<=0 then return a1:dist(_),_ elseif a3>=(a0-_):len()then return a1:dist(a0),a0 end;local a4=_+a3*a2;local a5=a4:dist(a1)return a5,a4 end;local a6=vec3({13771471,7435803,-128971})local a7=18000000;local a8=500000;local a9=math.huge;local aa=math.huge;local ab=math.huge;local ac=math.huge;local ad,ae,af,ag,ah;local ai=a6+(K-a6):normalize()*a7;local ac=K:dist(ai)local aj=K:dist(a6)>a7;for ak=1,#T do body1=T[ak]if body1.type[1]~="Asteroid"then local X=K:dist(vec3(body1.center))if X<a9 then a9=X;ad=body1 end;if body1.type[1]=="Planet"or body1.isSanctuary==true then if X<aa then aa=X;ae=body1 end;for al=ak+1,#T do body2=T[al]if body2.type[1]=="Planet"or body2.isSanctuary==true then local am,an=Z(vec3(body1.center),vec3(body2.center),K)if am<ab then ab=am;af=body1;ag=body2;ah=an end end end end end end;if aj then local ao=vec3(ad.center)+(K-vec3(ad.center)):normalize()*a8;local ap=(K-ao):len()if ap<ac then ac=ap;aj=(K-vec3(ad.center)):len()>a8;ai=ao end end;return{closestBody={body=ad,dist=a9},closestPipe={body1=af,body2=ag,dist=ab,point=ah},isPvP=aj,PvpBorderDist=ac,PvpBorderPos=ai}end;u=Y(vec3(d.getWorldPosition()))local aq=0;function n.onText(ar)ar=string.lower(ar)if ar:match('^addar%s(::pos.+})%s(.+)')~=nil then local K,R,S=ar:match('^addar%s(::pos.+})%s(.+)%s?(#%x?%x?%x?%x?%x?%x?)')if K==nil then K,R=ar:match('^addar%s(::pos.+})%s(.+)')S='#76f9e0'end;Q(K,R,S)elseif ar:match('^clearar')~=nil then local R=ar:match('^clearar%s(.+)')if R==nil then L={}else L[R]=nil end;P()elseif ar:match('^info')~=nil then local K=ar:match('^info%s(::pos.+})')local as=Y(x(K))a.print('Info on '..K)a.print('isPvP: '..(as.isPvP and'true'or'false'))a.print('Border ('..W(as.PvpBorderDist)..'): '..J(as.PvpBorderPos))a.print('closest Pipe ('..W(as.closestPipe.dist)..'): '..as.closestPipe.body1.name[1]..' - '..as.closestPipe.body2.name[1])a.print('closest Body ('..W(as.closestBody.dist)..'): '..as.closestBody.body.name[1])elseif ar:match('^helper$')~=nil then aq=1-aq;a.showHelper(aq)end end;local function at(au,av,G)local K=vec3(au)local O=vec3(av)local aw=vec3(G.center)local a3=K-aw;local ax=O:len2()local ay=a3:len()local az=G.GM;local aA=((ax-az/ay)*a3-a3:dot(O)*O)/az;local aB=az/(2*az/ay-ax)local aC=aA:len()local aD=aA:normalize()local aE=aB*(1-aC)local aF=aB*(1+aC)local aG=G.radius;local aH=aE*aD+aw;local aI=aE-aG;local aJ=nil;local aK=aF-aG;if aC<1 then aJ=-aF*aD+aw end;local aL=nil;if aJ~=nil then aL=2*math.pi*math.sqrt(aB^3/az)end;local aM=math.acos(aA:dot(a3)/(aC*ay))if a3:dot(O)<0 then aM=-(aM-2*math.pi)end;local aN=math.acos((math.cos(aM)+aC)/(1+aC*math.cos(aM)))local aO=aN;if aO<0 then aO=aO+2*math.pi end;local aP=aO-aC*math.sin(aO)local aQ=0;local aR=0;local aS=0;if aL~=nil then aQ=aP/(2*math.pi/aL)aR=aL-aQ;aS=aR+aL/2;if aM-math.pi>0 then aR=aQ;aS=aR+aL/2 end;if aS>aL then aS=aS-aL end else aR=(K-aH):len()/vec3(d.getVelocity()):len()end;return{aH,aI,aJ,aK,aR,aS}end;curOrbit=at(constructPos,constructVelocity,u.closestBody.body)local aT=a.getScreenHeight()local aU=a.getScreenWidth()local function aV(aw,aW)local aX={}local aY=vec3(0,0,1)local aZ=vec3(0,1,0)local aD=vec3(0,0,1)aX["00"]=aw+aD*aW;aX["50"]=aw-aD*aW;for ak=1,4 do aD=aD:rotate(math.pi/180*36,aZ)for al=0,9 do aD=aD:rotate(math.pi/180*36,aY)aX[''..ak..al]=aw+aD*aW end end;return aX end;local function a_(b0)return math.floor(b0+0.5)end;local function b1(b2,b3,S,b4,b5)local b6=400;local b7=c.getPointOnScreen({b3.x,b3.y,b3.z})if b7[3]<=0 then return''end;local b0=b7[1]*aU-b6/2;local b8=b7[2]*aT-b6/2;svg=[[<svg viewBox="0 0 500 500" class="point" style="left:]]..b0 ..[[px;top:]]..b8 ..[[px;position:absolute;width:]]..b6 ..[[px;height:]]..b6 ..[[px">]]if b2=='circle'then svg=svg..[[<circle cx="250" cy="250" r="10" opacity="0.75" stroke="]]..S..[[" stroke-width="2" fill="none"/>]]elseif b2=='cross'then svg=svg..[[<line x1="250" y1="242" x2="250" y2="258" opacity="0.75"  stroke="]]..S..[[" stroke-width="2"/><line x1="242" y1="250" x2="258" y2="250" opacity="0.5"  stroke="]]..S..[[" stroke-width="2"/>]]elseif b2=='triangle'then svg=svg..[[<line x1="242" y1="242" x2="250" y2="258" opacity="0.75"  stroke="]]..S..[[" stroke-width="2"/><line x1="258" y1="242" x2="250" y2="258" opacity="0.75"  stroke="]]..S..[[" stroke-width="2"/><line x1="242" y1="242" x2="258" y2="242" opacity="0.75"  stroke="]]..S..[[" stroke-width="2"/>]]elseif b2=='box'then svg=svg..[[<rect x="237" y="237" width="26" height="26" style="fill: rgba(0,0,0,0); stroke: ]]..S..[[; stroke-width: 2"/>]]end;svg=svg..[[<text x="50%" y ="47%" style="text-anchor: middle; stroke:#000; fill: ]]..S..[[; font-family: Arial, sans-serif; font-size: 14px;">]]..(b4 or'')..[[</text><text x="50%" y ="55%" style="text-anchor: middle; stroke:#000; fill: ]]..S..[[; font-family: Arial, sans-serif; font-size: 14px;">]]..(b5 or'')..[[</text></svg>]]return svg end;local function b9(b3,S,b4,b5)return b1('circle',b3,S,b4,b5)end;local function ba(b3,S)return b1('cross',b3,S)end;local function bb(d)local constructPos=vec3(d.getWorldPosition())local aX=aV(constructPos,10^7)local bc=''for R,b3 in pairs(aX)do bc=bc..b9(b3,"#cc8899",R)end;return bc end;local function bd(d)local constructPos=vec3(d.getWorldPosition())local w=require('atlas')local bc=''for U,V in pairs(w[0])do if V.type[1]~="Asteroid"then local X=(vec3(V.center)-constructPos):len()if not((V.type[1]~="Planet"or V.id==6)and X/10^3/200>20)then local be=math.floor(X/10^3/200).."su"bc=bc..b9(vec3(V.center),"#b6dbe7",V.name[1],be)end end end;local bf=vec3({13856549.3576,7386341.6738,-258459.8925})local be=math.floor((bf-constructPos):len()/10^3/200).."su"bc=bc..b9(bf,"#b6dbe7","Aegis",be)return bc end;local function bg(as)local S=as.isPvP and"#72ff5b"or"#FF5B72"local bh=as.isPvP and"Safe Zone"or"PVP"return b9(as.PvpBorderPos,S,bh,W(as.PvpBorderDist))end;local function bi(d,X)local bj=vec3(d.getWorldForward()):normalize()local K=vec3(d.getWorldPosition())local bk=K+bj*X;local bl=K-bj*X;local bm='#b6dbe7'local bn='#a11'local bc=ba(bk,bm)..ba(bl,bn)local bo=vec3(d.getWorldVelocity())if bo:len()>1 then local bp=bo:normalize()local bq=K+bp*X;local br=K-bp*X;bc=bc..b9(bq,bm)..b9(br,bn)end;return bc end;local function bs()local bc=''for R,bt in pairs(L)do local K,S=vec3(bt[1]),bt[2]local X=(K-vec3(d.getWorldPosition())):len()bc=bc..b1('box',K,S,R,W(X))end;return bc end;local function bu(as)local bc=''bc=bc..bd(d)bc=bc..bg(as)bc=bc..b9(as.closestPipe.point,'#b6dbe7','PIPE',W(as.closestPipe.dist))bc=bc..bs(d)return bc end;local function bv(bw,bx,by,bz)local bA='-'bz=bz or'█'local bB=math.floor(math.min(math.abs(math.max(bx-1,0)),1)*bw+0.5)local bC=math.floor(math.min(math.abs(bx),1)*bw+0.5)local bD;if bx>=0 then bD='[</a><a class="'..(by or'')..'">'..string.rep(bz,bC-bB)..'</a><a class="red">'..string.rep(bz,bB)..'</a><a>'..string.rep(bA,bw-bC)..']'elseif bx<0 then bD='['..string.rep(bA,bw-bC)..'</a><a class="red">'..string.rep(bz,bC).."</a><a>]"else bD='[</a><a class="red">'..string.rep('X',bw).."</a><a>]"end;return bD end;local function bE()local bF=d.getMass()local bG=0;local bH=d.getPlayersOnBoard()local bI=d.getPlayersOnBoardInVRStation()local bJ=d.getDockedConstructs()for U,bK in ipairs(bH)do bG=bG+d.getBoardedPlayerMass(bK)end;for U,bK in ipairs(bI)do bG=bG+d.getBoardedInVRStationAvatarMass(bK)end;for U,bK in ipairs(bJ)do bF=bF+d.getDockedConstructMass(bK)end;bF=bF+math.max(0,bG-20000)return bF end;local function bL(bM)local bN=bM;while true do bN,k=string.gsub(bN,"^(-?%d+)(%d%d%d)",'%1,%2')if k==0 then break end end;return bN end;local function bO(bP)bP=bP*3.6;return bL(math.floor(bP))..' km/h'end;local function bQ(bR)return string.format("%02d",math.floor(bR//60))..':'..string.format("%02d",math.floor(bR%60))end;local function bS(bR)if bR==-1 then return'ERR'elseif bR<60 then return math.floor(bR)..'s'elseif bR<60*60 then return math.floor(bR/60)..'m'elseif bR<60*60*24 then return math.floor(bR/(60*60))..'h'else return'1d+'end end;local function bT(bU)if bU<1000 then return math.floor(bU)elseif bU<1000*10 then return string.format("%.2fk",bU/1000)elseif bU<1000*100 then return string.format("%.1fk",bU/1000)elseif bU<1000*1000*10 then return string.format("%.2fm",bU/1000000)elseif bU<1000*200*100 then return string.format("%.1fm",bU/1000000)else return math.ceil(bU/1000000)..'m'end end;local function bV(bW)if bW<10 then return string.format("%.2fkg",bW)elseif bW<10^3 then return string.format("%.1fkg",bW)elseif bW<10^4 then return string.format("%.2ft",bW/10^3)elseif bW<10^5 then return string.format("%.1ft",bW/10^3)elseif bW<10^6 then return string.format("%.0ft",bW/10^3)elseif bW<10^7 then return string.format("%.2fkt",bW/10^6)elseif bW<10^8 then return string.format("%.1fkt",bW/10^6)else return string.format("%.0fkt",bW/10^6)end end;local function bX(bY,bZ)local bx={}for ak=1,#bY do bx[ak]=bY[ak]/bZ end;return bx end;local function b_()if curOrbit[2]>0 and curOrbit[2]<1000*50 then return b1('triangle',curOrbit[1],"#b6dbe7",W(curOrbit[2]),bQ(curOrbit[5]))else return''end end;local function c0()return[[
                <style>
                .main-outline {
                   position: absolute;
                   top: 67vh;
                   left: 28vw;
                   font-size: 0.9em;
                }
                </style>
                <div class="ui main-outline"><a>
                                                   _______________WT_HUD_v0.7.0.beta9__________
                                                  /                                            \
                      ___________________________/                                              \___________________________
                     /                          /                                                \                          \
                    /                          /                                                  \                          \
                   /                          /____________________________________________________\                          \
                  /                          |                                                      |                          \
                 /                           |                                                      |                           \
                /____________________________|                                                      |                            \
                |                            |                                                      |                            |
                |                            |                                                      |                            |
                |                            |                                                      |                            |
                |                            |                                                      |                            |
                |                            |                                                      |                            |
                |____________________________|______________________________________________________|____________________________|
                </a></div>
                ]]end;local function c1()local c2=string.format("%.1fg",vec3(d.getWorldAcceleration()):len()/9.80665)local c3=vec3(b.getEngineThrust('longitudinal')):len()local c4;local c5;local bY=d.getMaxThrustAlongAxis('longitudinal',d.getForward())if b.getAtmosphereDensity()>0.1 then c4=d.getFrictionBurnSpeed()c5=bY[1]elseif b.getAtmosphereDensity()>0 then c4=d.getFrictionBurnSpeed()c5=bY[1]+bY[3]else c4=d.getMaxSpeed()c5=bY[3]end;local c6=c5>0 and c3/c5 or 0;local c7=a_(c6*100)local c8=vec3(d.getWorldVelocity()):len()local c9=c8/c4;local ca=-1;if db_1~=nil and db_1.hasKey('targetSpeed')then ca=db_1.getIntValue('targetSpeed')end;local cb=(ca or 0)/c4;local cc;if ca~=-1 then local cd=bv(20,cb)local ce=string.format("%-14s",bO(ca))cc='target  '..cd..' '..ce else cc=string.rep(' ',48)end;local cf=bv(20,c9)..' '..string.format("%-14s",bO(c8))local cg;if b.getControlMode()==0 then local ch=b.getThrottle()/100;local ci=a_(ch*100)cg='throttle '..bv(20,ch)..' '..ci..'%'else local cj=b.getThrottle()/100/3.6;local ck=cj/c4;cg='  cruise '..bv(20,ck)..' '..bO(cj)end;return[[
                <style>
                .text-1 {
                   position: absolute;
                   top: 69.3vh;
                   left: 43vw;
                   font-size: 0.9em;
                }
                </style>
                <div class="ui text-1"><a> 
                 ]]..cc..[[ 
                  speed  ]]..cf..[[ 
                ]]..cg..[[ 
                 thrust  ]]..bv(20,c6)..' '..c7 ..'% ('..c2 ..[[) 
                </a></div>
                ]]end;local function cl()local cm={}local cn=1;local function co(cp,ar,by)local cq=cp and'■'or'-'local cr=by==nil and'['..cq..']'or'[</a><a class="'..by..'">'..cq..'</a><a>]'cm[cn]=cr..' '..ar;cn=cn+1 end;co(b.getControlMode()==1,'|A:R| cruise')local cs=nil;local ct='|CTR| brake'local cu=brakeInput>0;if brakeInput==2 or brakeInput==1 and brakeButtonHold~=1 then cs='red'ct=ct..' </a><a class="red">LOCKED</a><a>'elseif brakeInput==1 then cs='yellow'end;co(cu,ct,cs)if g~=nil and showShieldRelatedButtons then co(g.isActive(),'|SA:7| shield')co(g.isVenting(),'|A:1| vent',g.isVenting()and'yellow'or nil)co(h.getAutoRes(),'|A:2| auto resists')end;local cv=dampingOff==1 and'yellow'or nil;local cw='|A:3| '..(dampingOff==1 and'</a><a class="yellow">no damping</a><a>'or'no damping')co(dampingOff==1,cw,cv)if showAtmoRelatedButtons then co(autoLevel==1,'|A:4| auto-level')co(altitudeHold~=nil,altitudeHold==nil and'|A:5| altitude hold'or'|A:5| holding: '..W(altitudeHold))co(burnLimiter,'|A:6| burn limiter')end;co(landingMode,'| G | landing mode',landingMode and'red'or nil)co(groundStabilization,'|S:G| hover'..(groundStabilization and': '..W(b.getSurfaceEngineAltitudeStabilization())or''))co(showARCompass,'|A:8| AR marks')local cx=table.concat(cm,"\n")return[[
                <style>
                .text-2 {
                   position: absolute;
                   top: 73.5vh;
                   left: 64vw;
                   font-size: 0.8em;
                }
                </style>
                <div class="ui text-2"><a>]]..cx..[[</a></div>
                ]]end;local function cy(as)local constructVelocity=vec3(d.getWorldVelocity())local cz=vec3(e.getWorldGravity())local cA=constructVelocity:project_on(cz)local cB=math.floor(cA:len())if cA:dot(cz)>0 then cB=-cB end;local cC=d.getMaxBrake()local cD=bE()local c8=constructVelocity:len()local cE;if cC~=0 then cE=c8^2/(cC/cD)/2 else cE=0 end;local cF=c8~=0 and cE/c8*2 or 0;local cG=bV(cD)local cH=string.format('%-6s',W(cE))local cI=bQ(cF)if b.getAtmosphereDensity()==0 then local c5=d.getMaxThrustAlongAxis('space_engine',d.getForward())[3]local cJ=c8^2/((cC+c5)/cD)/2;local cK=c8~=0 and cJ/c8*2 or 0;cH=cH..' '..string.format('%-8s','('..W(cJ)..')')cI=cI..'  ('..bQ(cK)..')'else cH='   '..cH;cI='   '..cI end;local cL;if e.getAltitude()~=0 and as.closestBody.body.atmosphereThickness>0 then cL='burn speed: '..bO(d.getFrictionBurnSpeed())else cL='max speed:  '..bO(d.getMaxSpeed())end;return[[
                <style>
                .text-3 {
                   position: absolute;
                   top: 72.5vh;
                   left: 31vw;
                   font-size: 0.77em;
                }
                </style>
                <div class="ui text-3"><a>
                vert speed: ]]..cB..[[ m/s
                mass:       ]]..cG..[[ 
                ]]..cL..[[ 
                br dist: ]]..cH..[[ 
                br time: ]]..cI..[[ 
                </a></div>
                ]]end;local function cM()local function cN(cO)local cP=cO~=nil and json.decode(cO.getWidgetData())or{}local cQ=(cP.percentage~=nil and cP.percentage or 0)/100;local cR=a_(cQ*100)local cS=cP.timeLeft~=nil and(cP.timeLeft=='n/a'and-1 or cP.timeLeft)or-1;local cT=cS>=0 and bS(cS)or tostring(cR)..'%'return bv(10,cQ)..' '..cT end;local cU={}if j~=nil then cU[#cU+1]='atmo   '..cN(j)end;if l~=nil then cU[#cU+1]='space  '..cN(l)end;if m~=nil then cU[#cU+1]='rocket '..cN(m)end;local cV=table.concat(cU,"\n")return[[
                <style>
                .text-4 {
                   position: absolute;
                   top: 82vh;
                   left: 29vw;
                   font-size: 0.9em;
                }
                </style>
                <div class="ui text-4"><a>
                FUEL
                ]]..cV..[[
                </a></div>
                ]]end;local cW=""for ak=90,10,-10 do cW=cW..[[------- ]]..tostring(ak)..[[              ]]..tostring(ak)..[[ -------

                        --              --

                ]]end;cW=cW.."-------- 0              0 --------"for ak=-10,-90,-10 do cW=cW..[[ 

                        --              --

                ------ ]]..tostring(ak)..[[              ]]..tostring(ak)..[[ ------]]end;local function cX()local cY=t or 0;local cZ=s or 0;local c_=tostring((-cY+90)/180*100)return[[
                <style>
                .horizon-container {
                   position: absolute;
                   top: 77.5vh;
                   left: 41.25vw;
                   width: 21vw;
                   height: 13vh;
                   display: flex;
                   justify-content: center;
                   overflow: hidden;
                }
                .horizon {
                   font-size: 0.8em;
                   position: absolute;
                   top: 50%;
                   transform-origin: 50% ]]..c_..[[%;
                   transform: translate(0, -]]..c_..[[%) rotate(]]..tostring(-cZ)..[[deg);
                }
                .horizon-center {
                   font-size: 0.8em;
                   position: absolute;
                   top: 50%;
                   transform: translate(0, -50%);
                }
                </style>
                <div class="horizon-container">
                <div class="ui horizon-center"><a>\___   ___/
                /         \
                </a></div>
                <div class="ui horizon"><a>]]..cW..[[
                </a></div></div>
                ]]end;local function d0(aX)local b0=10;local d1={}local d2={' ','▄','█'}for U,d3 in ipairs(aX)do local d4={}local d5=math.floor(d3*b0)for U=1,d5 do table.insert(d4,d2[#d2])end;if d5<b0 then table.insert(d4,d2[math.floor(d3*b0%1*(#d2-1)+0.5)+1])end;for U=1,b0-d5+1 do table.insert(d4,d2[1])end;table.insert(d1,d4)end;local d6={}for ak=b0,1,-1 do local d4=''for al=1,#aX do d4=d4 ..d1[al][ak]end;table.insert(d6,d4)end;return d6 end;local function d7(d3)local d4={'','','','','','','','','',''}local d8=11-(math.floor(d3*9+0.5)+1)d4[d8]=math.floor(d3*100+0.5)..'%'return d4 end;local function d9(da,db)local d3={}for ak=1,#da,math.floor(#da/20)do table.insert(d3,da[ak])end;d3[#d3]=db;local dc=d0(d3)local dd=d7(db)return dc,dd end;local function de(bP)bP=bP or 5;local df={'|','/','|','\\'}local d8=math.floor(a.getUtcTime()*bP%#df)+1;return df[d8]end;local function dg()local dh=a.getUtcTime()local di=g.getShieldHitpoints()local dj=g.getMaxShieldHitpoints()local dk=di/dj;local dl=a_(dk*100)local dm=h.getShieldHistory()local dn=g.isVenting()local dp=''if dn then dp='yellow'elseif not g.isActive()then dp='red'end;local dq=''if dk<0.5 then dq='yellow'elseif dk<0.2 then dq='red'end;shieldStatusStr=g.isActive()and' ONLINE'or'OFFLINE'local ae,dd=d9(dm,dk)for ak=1,#ae do ae[ak]='</a><a class="'..dq..'">'..ae[ak]..'</a><a>'end;return[[
                <style>
                .shield-panel {
                    position: absolute;
                    top: 77vh;
                    left: 39.5vw;
                    font-size: 0.65em;
                }
                </style>
                <div class="ui shield-panel"><a>
                  ]]..string.format('%20s',bT(di))..[[ / ]]..string.format('%-21s',bT(dj))..[[ 
                     </a><a class="]]..dp..[[">SHIELD</a><a> |]]..ae[1]..[[| ]]..dd[1]..[[        
                    </a><a class="]]..dp..[[">]]..shieldStatusStr..[[</a><a> |]]..ae[2]..[[| ]]..dd[2]..[[ 
                            |]]..ae[3]..[[| ]]..dd[3]..[[ 
                            |]]..ae[4]..[[| ]]..dd[4]..[[ 
                            |]]..ae[5]..[[| ]]..dd[5]..[[ 
                            |]]..ae[6]..[[| ]]..dd[6]..[[ 
                            |]]..ae[7]..[[| ]]..dd[7]..[[ 
                            |]]..ae[8]..[[| ]]..dd[8]..[[ 
                            |]]..ae[9]..[[| ]]..dd[9]..[[ 
                            |]]..ae[10]..[[| ]]..dd[10]..[[           
                </a></div>]]end;local function dr()local ds=e.getMaxCoreStress()-e.getCoreStress()local dt=e.getMaxCoreStress()local du=dt>0 and ds/dt or 0;local dv=a_(du*100)local dw=''if du<0.5 then dw='yellow'elseif du<0.2 then dw='red'end;local dx=bv(20,du,dw)local dy=string.format('%-5s',dv..'%')local dn=g.isVenting()local dz=bX(g.getResistances(),g.getResistancesPool())local dA=g.getResistancesCooldown()local dB=g.getResistancesMaxCooldown()local dC=dA/dB;local dD=g.getVentingCooldown()local dE=g.getVentingMaxCooldown()local dF=dD/dE;local dG=h.getStressRatio()local dH=h.getAutoRes()local dI={}for ak,a3 in ipairs(dz)do dI[ak]=bv(12,a3,'blue')end;local dJ={}for ak,a3 in ipairs(dG)do dJ[ak]=bv(12,a3,'red')end;local dK=dH and''or'yellow'local dL='</a><a class="'..dK..'">'..h.getAutoResModeStr()..'</a><a>'local dM=bv(16,dC)local dN=string.format('%-11s',dA==0 and'READY'or bQ(dA))local dO=dn and bv(16,1,'yellow',de())or bv(16,dF)local dP=string.format('%-11s',dn and'IN PROGRESS'or(dD==0 and'READY'or bQ(dD)))return[[
                <style>
                .res-panel {
                    position: absolute;
                    top: 77vh;
                    left: 51vw;
                    font-size: 0.55em;
                }
                </style>
                <div class="ui res-panel"><a>   
                  ]]..string.format('%20s',bT(ds))..[[ / ]]..string.format('%-21s',bT(dt))..[[  
                        CCS ]]..dx..[[ ]]..string.format('%-11s',bT(dv)..'%')..[[  
                                                                        
                                 ]]..dI[2]..[[ 
                                 ]]..dJ[2]..[[ 
                                       EM
                    ]]..dI[1]..[[  AM    KI  ]]..dI[3]..[[ 
                    ]]..dJ[1]..[[     TH     ]]..dJ[3]..[[ 
                                 ]]..dI[4]..[[ 
                                 ]]..dJ[4]..[[ 
                    AUTO: ]]..dL..[[ 
                           RES ]]..dM..[[ ]]..dN..[[ 
                    |A:1| VENT ]]..dO..[[ ]]..dP..[[ 
                </a></div>]]end;local function dQ(as)local function dR(R)return R:gsub("Asteroid ","A"):gsub("Moon ","M"):sub(1,11)end;local bh=as.isPvP and'SAFE ZONE'or' PVP ZONE'return[[
                <style>
                .position-panel {
                    position: absolute;
                    top: 11vh;
                    left: 88vw;
                    font-size: 0.9em;
                }
                </style>
                <div class="ui position-panel"><a>
                 ___                ___
                |                      |
                |  ]]..bh..[[  ]]..string.format('%7s',W(as.PvpBorderDist))..[[  |

                  ]]..string.format('%11s',dR(as.closestBody.body.name[1]))..[[  ]]..string.format('%6s',W(as.closestBody.dist))..[[ 
                         atmo: ]]..string.format('%6s',W(as.closestBody.body.atmosphereThickness))..[[ 
                      gravity:  ]]..string.format('%.2fg',as.closestBody.body.gravity/9.80665)..[[ 
                  avg surface: ]]..string.format('%6s',W(as.closestBody.body.surfaceAverageAltitude))..[[ 
                  max surface: ]]..string.format('%6s',W(as.closestBody.body.surfaceMaxAltitude))..[[ 
                 
                 ]]..string.format('%11s',dR(as.closestPipe.body1.name[1]))..[[-]]..string.format('%-11s',dR(as.closestPipe.body2.name[1]))..[[ 
                |  PIPE        ]]..string.format('%7s',W(as.closestPipe.dist))..[[ |
                |___                ___|
                </a></div>
                ]]end;function n.onFlush()local function dS(dT,dU,dV)local dW=dT:cross(dV):normalize_inplace()local dX=math.acos(utils.clamp(dW:dot(-dU),-1,1))*constants.rad2deg;if dW:cross(-dU):dot(dV)<0 then dX=-dX end;return dX end;local dY=vec3(e.getWorldVertical())local dZ=vec3(d.getWorldOrientationForward())local d_=vec3(d.getWorldOrientationUp())local e0=vec3(d.getWorldOrientationRight())local e1=getRoll(dY,dZ,e0)s=e1 or 0;local e2=s/180*math.pi;local e3=math.cos(e2)local e4=math.sin(e2)local e5=dS(dY,dZ,e0*e3+d_*e4)t=utils.clamp(e5,-90,90)local e6=2;local e7=100/3.6;e6=math.max(e6,0.01)local e8=pitchInput+a.getControlDeviceForwardInput()local e9=rollInput+a.getControlDeviceYawInput()local ea=yawInput-a.getControlDeviceLeftRightInput()local eb=brakeInput;local dY=vec3(e.getWorldVertical())local cz=vec3(e.getWorldGravity())local constructPos=vec3(d.getWorldPosition())local ec=vec3(d.getWorldOrientationUp())local ed=vec3(d.getWorldOrientationForward()):normalize()local ee=vec3(d.getWorldOrientationRight())local constructVelocity=vec3(d.getWorldVelocity())local ef=constructVelocity:normalize()local c8=constructVelocity:len()local e1=getRoll(dY,ed,ee)local eg=math.abs(e1)local eh=utils.sign(e1)local cC=d.getMaxBrake()local cD=bE()u=Y(vec3(d.getWorldPosition()))curOrbit=at(constructPos,constructVelocity,u.closestBody.body)verticalSpeed=constructVelocity:project_on(cz):len()if cz:dot(constructVelocity)>0 then verticalSpeed=-verticalSpeed end;local ei=vec3(d.getWorldAngularVelocity())local ej;local ek=b.getAtmosphereDensity()local el=burnLimiterSpeed/3.6;if el==0 then el=d.getFrictionBurnSpeed()end;local em=0;if altitudeHold~=nil then local en=100;local eo=30;local ep=e.getAltitude()-altitudeHold;local eq=utils.clamp(ep/100,-1,1)local er=-en*eq;local es=er-verticalSpeed;local et=utils.clamp(es/en,-1,1)f.axisCommandManager:setThrottleCommand(axisCommandId.vertical,et*100)a.print(vec3(b.getEngineThrust('airfoil')):len()/cD/9.81)local c3=vec3(b.getEngineThrust('longitudinal')):len()local eu=c3/cD;local ev=5*et;if eu>0 then em=utils.clamp(math.asin(ev/eu)*constants.rad2deg,-eo,eo)end elseif landingMode and not manualVerticalInput then local es=targetLandingSpeed-verticalSpeed;if es>10 then eb=1 end;local et=utils.clamp(es/100,-1,1)f.axisCommandManager:setThrottleCommand(axisCommandId.vertical,et*100)end;local ew=30;if autoLevel==1 and e8==0 and e9==0 and s~=0 and t~=em then e9=utils.clamp(-s,-ew,ew)/ew;e8=utils.clamp(-t+em,-ew,ew)/ew;if math.abs(s)>90 then e8=-e8 end;ej=e8*ee+e9*ed+ea*ec elseif dampingOff==1 and e8==0 and e9==0 and ea==0 then ej=ei else ej=(e8*ee+e9*ed+ea*ec):normalize()*d.getMaxAngularSpeed()end;local ex=1;local ey=0;local ez=1;local eA=e6*(ej-ei)local eB=vec3(d.getWorldAirFrictionAngularAcceleration())eA=eA-eB;local eC=airfoilTorque and'airfoil'or''f:setEngineTorqueCommand('torque',eA,ex,eC,'','',ez)local eD=''local eE=vec3()local eF=false;local eG='thrust analog longitudinal'local eH=f.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if eH==axisCommandType.byThrottle then local eI=f.axisCommandManager:composeAxisAccelerationFromThrottle(eG,axisCommandId.longitudinal)if burnLimiter then local eJ=(vec3(u.closestBody.body.center)-constructPos):normalize()local eK=constructVelocity:project_on(eJ):len()local eL=eJ:dot(ed)>0;local eM=eJ:dot(ef)>0;if eM then eK=-eK end;local eN=u.closestBody.body.atmosphereThickness>0 and eK<0 and curOrbit[2]<u.closestBody.body.atmosphereThickness;if ek>0.1 or ek>0 and t<0 then local eO=ef:dot(ed)>0;if c8>el then if eO then eI=vec3()end;eb=1 elseif c8>el-e7 then local eP=vec3(d.getWorldAirFrictionAcceleration())local eQ=(eP+cz:project_on(ef)):len()local eR=eQ/ed:project_on(ef):len()local eS=(el-c8-1/3.6)/e7;if eS<0 then eS=0 end;eR=eR+20*eS;if eO and eI:len()>eR then eI=eR*ed end end elseif eN and cC>0 then local eT=ef:project_on(eJ):len()local eU=u.closestBody.body.GM/u.closestBody.body.atmosphereRadius^2;local eV=cC/cD*eT-eU;if eV<=0 then eV=0.0001 end;local eW=el*eT;local eX=(eK^2-eW^2)/(2*eV)local eY=u.closestBody.dist-u.closestBody.body.atmosphereRadius;if-eK>eW and eX>=eY then if eL then eI=vec3()end;eb=1 end end end;f:setEngineForceCommand(eG,eI,ex)elseif eH==axisCommandType.byTargetSpeed then local eI=f.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)eD=eD..' , '..eG;eE=eE+eI;if f.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or f.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-f.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then eF=true end end;local eZ=eb*cC*-ef;if c8<5 then eZ=eb*-(30*constructVelocity+1*ef+cz)end;f:setEngineForceCommand('brake',eZ)local e_='thrust analog lateral'local f0=f.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if f0==axisCommandType.byThrottle then local f1=f.axisCommandManager:composeAxisAccelerationFromThrottle(e_,axisCommandId.lateral)f:setEngineForceCommand(e_,f1,ex)elseif f0==axisCommandType.byTargetSpeed then local f2=f.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)eD=eD..' , '..e_;eE=eE+f2 end;local f3='thrust analog vertical'local f4=f.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if f4==axisCommandType.byThrottle then local f5=f.axisCommandManager:composeAxisAccelerationFromThrottle(f3,axisCommandId.vertical)f:setEngineForceCommand(f3,f5,ex,'airfoil','ground','',ez)elseif f4==axisCommandType.byTargetSpeed then local f6=f.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)eD=eD..' , '..f3;eE=eE+f6 end;if eE:len()>constants.epsilon then if brakeInput~=0 or eF or math.abs(ef:dot(ed))<0.95 then eD=eD..', brake'end;f:setEngineForceCommand(eD,eE,ey,'','','',ez)end;f:setBoosterCommand('rocket_engine') end;local function f7()local f8=showARCompass and bu(u)..dQ(u)..b_()or''local bc=r..f8 ..bi(d,10^7)..c1()..cl()..cy(u)..cM()if showGuiOutline then bc=bc..c0()end;local cz=vec3(e.getWorldGravity()):len()if e.getAltitude()~=0 or g==nil then bc=bc..cX()else bc=bc..dg()..dr()end;return bc end;local function f9()a.setScreen(f7())end;function n.onUpdate()f9()end;return n end

                wtPilotHud = PilotHUDClass(system, unit, library, construct, core, Nav, shield, wtShield, db, atmofueltank_1, spacefueltank_1, rocketfueltank_1)
    
        onTimer:
            args: ["wtShieldTick"]
            lua: |
                wtShield.onTick()
    system:
        onUpdate:
            lua: |
                Nav:update()
                wtPilotHud.onUpdate()
                wtMonitor.onUpdate()
        onFlush:
            lua: |
                local ok, msg = xpcall(wtPilotHud.onFlush, traceback)
                if not ok then
                  system.print(msg:gsub("\n", "<br>"))
                end
                --wtPilotHud.onFlush()
        actionStart:
            args: [forward]
            lua: pitchInput = pitchInput - 1
        actionStop:
            args: [forward]
            lua: pitchInput = pitchInput + 1
        actionStart:
            args: [backward]
            lua: pitchInput = pitchInput + 1
        actionStop:
            args: [backward]
            lua: pitchInput = pitchInput - 1
        actionStart:
            args: [left]
            lua: rollInput = rollInput - 1
        actionStop:
            args: [left]
            lua: rollInput = rollInput + 1
        actionStart:
            args: [right]
            lua: rollInput = rollInput + 1
        actionStop:
            args: [right]
            lua: rollInput = rollInput - 1
        actionStart:
            args: [yawright]
            lua: yawInput = yawInput - 1
        actionStop:
            args: [yawright]
            lua: yawInput = yawInput + 1
        actionStart:
            args: [yawleft]
            lua: yawInput = yawInput + 1
        actionStop:
            args: [yawleft]
            lua: yawInput = yawInput - 1
        actionStart:
            args: [brake]
            lua: |
                brakeButtonHold = 1
                if brakeToggle then
                    brakeInput = 1 - brakeInput 
                else
                    brakeInput = 1
                end
        actionStop:
            args: [brake]
            lua: |
                brakeButtonHold = 0
                if not brakeToggle then
                    brakeInput = brakeInput - 1
                end
        actionStart:
            args: [gear]
            lua: |
                if lshiftInput then
                    if groundStabilization then
                        groundStabilization = false
                        Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                    else
                        groundStabilization = true
                        Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()
                    end
                elseif landingMode then
                    landingMode = false
                    unit.retractLandingGears()
                    if defaultHoverAltitude > 0 then
                        groundStabilization = true
                        Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()
                        Nav.axisCommandManager:setTargetGroundAltitude(defaultHoverAltitude)
                    end
                    Nav.axisCommandManager:resetCommand(axisCommandId.vertical)
                else
                    landingMode = true
                    altitudeHold = nil
                    unit.deployLandingGears()
                    Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                    groundStabilization = false
                end
        actionStart:
            args: [booster]
            lua: Nav:toggleBoosters()
        actionStart:
            args: [stopengines]
            lua: |
                if unit.getThrottle() == 0 then
                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 100)
                else
                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 0)
                end
        actionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateThrottleCommand(axisCommandId.longitudinal, 0.05)
        actionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateThrottleCommand(axisCommandId.longitudinal, -0.05)
        actionStart:
            args: [option1]
            lua: |
                if shield.isVenting() then
                    shield.stopVenting()
                else
                    shield.startVenting()
                end
        actionStart:
            args: [option2]
            lua: |
                wtShield.toogleAutoRes()
        actionStart:
            args: [option3]
            lua: |
                dampingOff = 1 - dampingOff
        actionStart:
            args: [option4]
            lua: |
                if altitudeHold == nil then
                    autoLevel = 1 - autoLevel
                end
        actionStart:
            args: [option5]
            lua: |
                local curAlt = core.getAltitude()
                if altitudeHold == nil then
                    altitudeHold = curAlt
                    autoLevel = 1
                else
                    altitudeHold = nil
                    autoLevel = 0
                    Nav.axisCommandManager:resetCommand(axisCommandId.vertical)
                end
        actionStart:
            args: [option6]
            lua: |
                burnLimiter = not burnLimiter
        actionStart:
            args: [option7]
            lua: |
                if lshiftInput then 
                    shield.toggle()
                end
        actionStart:
            args: [option8]
            lua: |
                showARCompass = not showARCompass
        actionStart:
            args: [lshift]
            lua: |
                lshiftInput = true
        actionStop:
            args: [lshift]
            lua: |
                lshiftInput = false
                if manualResToApply then 
                    wtShield.manualOverride(manualResToApply)
                    manualResToApply = nil
                end
        actionStart:
            args: [strafeleft]
            lua: |
                if lshiftInput then
                    if not manualResToApply then manualResToApply = {0,0,0,0} end
                    manualResToApply[1] = manualResToApply[1] + 1
                else
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
                end
        actionStop:
            args: [strafeleft]
            lua: |
                if unit.getAxisCommandValue(1) == -1 then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)
                end
        actionStart:
            args: [up]
            lua: |
                if lshiftInput then
                    if not manualResToApply then manualResToApply = {0,0,0,0} end
                    manualResToApply[2] = manualResToApply[2] + 1
                elseif brakeInput == 1 then
                    brakeInput = 2
                else
                    manualVerticalInput = true
                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical, 0)
                    Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
                end
        actionLoop:
            args: [up]
            lua: |
                if altitudeHold ~= nil then
                    altitudeHold = altitudeHold + 10
                end
        actionStop:
            args: [up]
            lua: |
                manualVerticalInput = false
                if unit.getAxisCommandValue(2) == 1 then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                end
                if groundStabilization then
                    Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()
                end
        actionStart:
            args: [straferight]
            lua: |
                if lshiftInput then
                    if not manualResToApply then manualResToApply = {0,0,0,0} end
                    manualResToApply[3] = manualResToApply[3] + 1
                else
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
                end
        actionStop:
            args: [straferight]
            lua: |
                if unit.getAxisCommandValue(1) == 1 then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)
                end
        actionStart:
            args: [down]
            lua: |
                if lshiftInput then
                    if not manualResToApply then manualResToApply = {0,0,0,0} end
                    manualResToApply[4] = manualResToApply[4] + 1
                else
                    manualVerticalInput = true
                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.vertical, 0)
                    Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
                end
        actionLoop:
            args: [down]
            lua: |
                if altitudeHold ~= nil then
                    altitudeHold = altitudeHold - 10
                end
        actionStop:
            args: [down]
            lua: |
                manualVerticalInput = false
                if unit.getAxisCommandValue(2) == -1 then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                end
                if groundStabilization then
                    Nav.axisCommandManager:activateGroundEngineAltitudeStabilization()
                end
        actionStart:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)
        actionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)
        actionStart:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)
        actionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)
        inputText(text):
            lua: |
                wtPilotHud.onText(text)
    shield:
        down():
            lua: |
                wtShield.onDown()
        venting(active, restoredHitpoints):
            lua: |
                wtShield.onVentingEvent(active, restoredHitpoints)
        absorbed(hitpoints, hitpointsRaw):
            lua: |
                wtShield.onAbsorb(hitpoints, hitpointsRaw)
