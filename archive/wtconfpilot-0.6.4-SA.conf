# This is a file describing a standard autoconfiguration, do not edit.
# See custom/sample.conf for a more generic template and explanation on the syntax.

name: WT Pilot v0.6.4-SA
pvp: true

slots:
    core:
        class: CoreUnit
    shield:
        class: ShieldGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    spacefueltank:
        class: SpaceFuelContainer
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    db:
        class: DatabankUnit
        select: manual

handlers:
    unit:
        onStart:
            lua: |
                showARCompass = false --export
                holdBrakeOnInit = true --export
                autoRes = true --export
                autoResMode = 1 --export
                autoResMinHitCount = 0 --export
                shieldDebugLog = false --export
                maxAngularSpeed = 0 --export
                
                Nav=Navigator.new(self.system,self.core,self.unit)pitchInput=0;rollInput=0;yawInput=0;dampingOff=0;screenHeight=system.getScreenHeight()screenWidth=system.getScreenWidth()brakeInput=holdBrakeOnInit and vec3(construct.getWorldVelocity()):len()<100 and 1 or 0;function shieldClass(system,unit,shield,autoRes,autoResMode,autoResMinHitCount,a)if autoRes==nil then autoRes=true end;if a==nil then a=false end;local wtShield={}local b={MAX=0,MAX2=1,RATIO=2}autoResMode=autoResMode or b.MAX2;autoResMinHitCount=autoResMinHitCount or 0;local c=nil;local d={0,0,0,0}local e=shield.getResistances()local f={0,0,0,0}local g=1;local h=30;local i={}for j=1,h do i[#i+1]={0,0,0,0}end;local l={0,0,0,0}local m=0;local n=0;local o=0.0001;local p={}for j=1,120 do p[j]=shield.getShieldHitpoints()/shield.getMaxShieldHitpoints()end;local q={"AM","EM","KI","TH"}local function r(s,t)t=t or 1;local u=0;for j=1,#s do u=u+s[j]end;if u==0 then return{0,0,0,0}end;local v={}for j=1,#s do v[j]=s[j]/u*t end;return v end;local function w(x)local y={0,0,0,0}for z,A in ipairs(x)do for j,B in ipairs(A)do y[j]=y[j]+B end end;return y end;local function C(D)local E={}local F=#D;for j=1,F do E[j]=j end;local G=false;repeat G=false;for j=2,F do if D[E[j-1]]<D[E[j]]then E[j-1],E[j]=E[j],E[j-1]G=true end end until not G;return table.unpack(E)end;local function H(A,I)local J,K,L,M=C(A)if A[J]>I*3 then A[J]=A[J]-I*3 end;A[K]=A[K]A[L]=A[L]+I*1;A[M]=A[M]+I*2 end;local function N(O)local P={}for j=1,#O do local Q=O[j]if not P[Q]then P[Q]=true else return true end end;return false end;local function R(O,S)for j=1,#O do if math.abs(O[j]-S[j])>o/10 then return false end end;return true end;local function T(U)local V={0,0,0,0}local W=C(U)V[W]=1;return V end;local function X(U)local V={0,0,0,0}local Y,Z=C(U)V[Y]=1;if U[Z]>1 and U[Z]/U[Y]>0.3 then V[Z]=1 end;return V end;local function _(a0)local a1=r(a0,shield.getResistancesPool())H(a1,o)if R(a1,e)or shield.getResistancesCooldown()>0 then return end;local a2=shield.setResistances(table.unpack(a1))if not a2 then system.print('wtShield ERROR (code: 4) ('..table.concat(a1,",")..')')else e=a1;system.print('Successfuly applied resistances ('..table.concat(a1,",")..')')end end;local function a3()if shield.getResistancesCooldown()~=0 or R(l,{0,0,0,0})then return end;local V;if autoResMode==b.MAX then V=T(l)elseif autoResMode==b.MAX2 then V=X(l)elseif autoResMode==b.RATIO then V=d else V={0.25,0.25,0.25,0.25}system.print('wtShield ERROR (code: 3)')end;_(V)end;function wtShield.onDown()shield.startVenting()end;function wtShield.onVentingEvent(a4,a5)if not a4 then shield.activate()end end;function wtShield.toogleAutoRes()autoRes=not autoRes;if autoRes then c=nil end;system.print('AutoRes '..(autoRes and'ON'or'OFF'))end;function wtShield.manualOverride(a1)autoRes=false;c=a1;system.print('AutoRes OFF, setting manual res to '..table.concat(a1,", "))end;function wtShield.onAbsorb(a6,a7)local a8=0.9-a6/a7;local a9;for j=1,#e do if math.abs(a8-e[j])<o/10 then if not a9 then a9=j else system.print('wtShield ERROR (code: 1)')return end end end;if not a9 then system.print('wtShield ERROR (code: 2)')return end;if a then system.print('HIT '..q[a9]..' '..a7)end;local aa=system.getUtcTime()n=n+1;f[a9]=aa;i[#i][a9]=i[#i][a9]+a7;l=w(i)d=r(l)end;function wtShield.onTick()local aa=system.getUtcTime()if autoRes and n>0 and(autoResMinHitCount==0 or n>=autoResMinHitCount)and aa-math.max(table.unpack(f))<h*g*0.8 then a3()end;if c then _(c)end;m=n;table.remove(i,1)i[#i+1]={0,0,0,0}l=w(i)d=r(l)if R(l,{0,0,0,0})then n=0 end;table.remove(p,1)p[120]=shield.getShieldHitpoints()/shield.getMaxShieldHitpoints()end;function wtShield.getStressRatio()return d end;function wtShield.getLastHitTimes()return f end;function wtShield.getShieldHistory()return p end;function wtShield.getAutoRes()return autoRes end;function wtShield.getAutoResModeStr()if not autoRes then return'OFF'elseif autoResMode==0 then return'MAX'elseif autoResMode==1 then return'MAX2'elseif autoResMode==2 then return'RATIO'end end;system.print('currentRes: '..table.concat(e,", "))if autoRes then _({1,1,1,1})elseif N(e)then system.print('found equal resists, unequalizing...')_(e)end;unit.setTimer('wtShieldTick',g)return wtShield end;function audioManagerClass(system)local ab={}local ac={}function ab.onUpdate()if system.isPlayingSound()then return end;if ac[1]==nil then return end;system.playSound(ac[1])table.remove(ac,1)end;function ab.playSound(ad)table.insert(ac,ad)end;return ab end;function monitorClass(system,core,shield,ae)local af={}local ag;local ah=audioManagerClass(system)local ai=0.4;local aj=0.1;local ak=0.4;local al=0.1;local am=0.4;local an=0.1;local ao="wthud/fuelLow.mp3"local ap="wthud/fuelCritical.mp3"local aq="wthud/shieldLow.mp3"local ar="wthud/shieldCritical.mp3"local as="wthud/ccsLow.mp3"local at="wthud/ccsCritical.mp3"local au="wthud/targetAccelerating.mp3"local av="wthud/targetBraking.mp3"local function aw()local ax={}if sheild~=nil then ax.shieldHpRatio=shield.getShieldHitpoints()/shield.getMaxShieldHitpoints()end;ax.stressHpRatio=core.getMaxCoreStress()>0 and core.getCoreStress()/core.getMaxCoreStress()or 0;ax.fuelPercent=ae~=nil and ae.getItemsVolume()/ae.getMaxVolume()or 0;return ax end;function af.onUpdate()local ax=aw()if shield~=nil then if(ag.shieldHpRatio or 0)>ak and ax.shieldHpRatio<=ak then ah.playSound(aq)end;if(ag.shieldHpRatio or 0)>al and ax.shieldHpRatio<=al then ah.playSound(ar)end end;if ag.stressHpRatio>am and ax.stressHpRatio<=am then ah.playSound(as)end;if ag.stressHpRatio>an and ax.stressHpRatio<=an then ah.playSound(at)end;if ag.fuelPercent>ai and ax.fuelPercent<=ai then ah.playSound(ao)end;if ag.fuelPercent>aj and ax.fuelPercent<=aj then ah.playSound(ap)end;ag=ax;ah.onUpdate()end;ag=aw()return af end;wtShield=shieldClass(system,unit,shield,autoRes,autoResMode,autoResMinHitCount,shieldDebugLog)wtMonitor=monitorClass(system,core,shield,spacefueltank_1)unit.hideWidget()if warpdrive~=nil then warpdrive.show()end;system.showHelper(0)system.showScreen(1)local ay=require('atlas')local function az(aA)local aB=" *([+-]?%d+%.?%d*e?[+-]?%d*)"local aC="::pos{"..aB..","..aB..","..aB..","..aB..","..aB.."}"local aD,aE,aF,aG,aH=string.match(aA,aC)if aD==nil or aE==nil or aF==nil or aG==nil or aH==nil then system.print("Error converting POS")return vec3()end;if aD=="0"and aE=="0"then return vec3(aF,aG,aH)end;aG=math.rad(aG)aF=math.rad(aF)local aI=ay[tonumber(aD)][tonumber(aE)]local aJ=math.cos(aF)local aK=vec3(aJ*math.cos(aG),aJ*math.sin(aG),math.sin(aF))return vec3(aI.center)+(aI.radius+aH)*aK end;local function aL(aM)aM=vec3(aM)return"::pos{0,0,"..aM.x..","..aM.y..","..aM.z.."}"end;local aN={}local function aO()if db_1~=nil and db_1.hasKey('AR')then local aP=0;for k,aQ in pairs(json.decode(db_1.getStringValue('AR')))do aN[k]=aQ;aP=aP+1 end;system.print('Loaded '..aP..' AR marks from databank')end end;local function aR()if db_1~=nil then db_1.setStringValue('AR',json.encode(aN))system.print('saved AR marks to databank')end end;local function aS(aM,aT,aU)aN[aT]={az(aM),aU}aR()end;aO()local aV={}for z,aW in pairs(ay[0])do table.insert(aV,aW)end;local function aX(aY)if aY<1000 then return math.ceil(aY)..'m'elseif aY<1000*10 then return string.format("%.2fkm",aY/1000)elseif aY<1000*100 then return string.format("%.1fkm",aY/1000)elseif aY<1000*200*10 then return string.format("%.2fsu",aY/1000/200)elseif aY<1000*200*100 then return string.format("%.1fsu",aY/1000/200)else return math.ceil(aY/1000/200)..'su'end end;local function aZ(aM)local function a_(b0,b1,b2)local b3=(b1-b0):normalize()local b4=(b2-b0):dot(b3)/b3:dot(b3)if b4<=0 then return b2:dist(b0),b0 elseif b4>=(b1-b0):len()then return b2:dist(b1),b1 end;local b5=b0+b4*b3;local b6=b5:dist(b2)return b6,b5 end;local b7=vec3({13771471,7435803,-128971})local b8=18000000;local b9=500000;local ba=math.huge;local bb=math.huge;local bc=math.huge;local bd,be,bf,bg;local bh=b7+(aM-b7):normalize()*b8;local bc=aM:dist(bh)local bi=aM:dist(b7)>b8;for j=1,#aV do body1=aV[j]local aY=aM:dist(vec3(body1.center))if aY<ba then ba=aY;bd=body1 end;if body1.type[1]=="Planet"or body1.isSanctuary==true then for bj=j+1,#aV do body2=aV[bj]if body2.type[1]=="Planet"or body2.isSanctuary==true then local bk,bl=a_(vec3(body1.center),vec3(body2.center),aM)if bk<bb then bb=bk;be=body1;bf=body2;bg=bl end end end end end;if bi then local bm=vec3(bd.center)+(aM-vec3(bd.center)):normalize()*b9;local bn=(aM-bm):len()if bn<bc then bc=bn;bi=(aM-vec3(bd.center)):len()>b9;bh=bm end end;return{closestBody={body=bd,dist=ba},closestPipe={body1=be,body2=bf,dist=bb,point=bg},isPvP=bi,PvpBorderDist=bc,PvpBorderPos=bh}end;local bo=0;function onText(bp)bp=string.lower(bp)if bp:match('^addar%s(::pos.+})%s(.+)')~=nil then local aM,aT,aU=bp:match('^addar%s(::pos.+})%s(.+)%s?(#%x?%x?%x?%x?%x?%x?)')if aM==nil then aM,aT=bp:match('^addar%s(::pos.+})%s(.+)')aU='#76f9e0'end;aS(aM,aT,aU)elseif bp:match('^clearar')~=nil then local aT=bp:match('^clearar%s(.+)')if aT==nil then aN={}else aN[aT]=nil end;aR()elseif bp:match('^info')~=nil then local aM=bp:match('^info%s(::pos.+})')local bq=aZ(az(aM))system.print('Info on '..aM)system.print('isPvP: '..(bq.isPvP and'true'or'false'))system.print('Border ('..aX(bq.PvpBorderDist)..'): '..aL(bq.PvpBorderPos))system.print('closest Pipe ('..aX(bq.closestPipe.dist)..'): '..bq.closestPipe.body1.name[1]..' - '..bq.closestPipe.body2.name[1])system.print('closest Body ('..aX(bq.closestBody.dist)..'): '..bq.closestBody.body.name[1])elseif bp:match('^helper$')~=nil then bo=1-bo;system.showHelper(bo)end end;local screenHeight=system.getScreenHeight()local screenWidth=system.getScreenWidth()local function br(bs,bt)local bu={}local bv=vec3(0,0,1)local bw=vec3(0,1,0)local bx=vec3(0,0,1)bu["00"]=bs+bx*bt;bu["50"]=bs-bx*bt;for j=1,4 do bx=bx:rotate(math.pi/180*36,bw)for bj=0,9 do bx=bx:rotate(math.pi/180*36,bv)bu[''..j..bj]=bs+bx*bt end end;return bu end;local function by(bz)return math.floor(bz+0.5)end;local function bA(bB,bC,aU,bD,bE)local bF=400;local bG=library.getPointOnScreen({bC.x,bC.y,bC.z})if bG[3]<=0 then return''end;local bz=bG[1]*screenWidth-bF/2;local bH=bG[2]*screenHeight-bF/2;svg=[[<svg viewBox="0 0 500 500" class="point" style="left:]]..bz..[[px;top:]]..bH..[[px;position:absolute;width:]]..bF..[[px;height:]]..bF..[[px">]]if bB=='circle'then svg=svg..[[<circle cx="250" cy="250" r="10" opacity="0.3" stroke="]]..aU..[[" stroke-width="2" fill="none"/>]]elseif bB=='cross'then svg=svg..[[<line x1="250" y1="242" x2="250" y2="258" opacity="0.5"  stroke="]]..aU..[[" stroke-width="2"/><line x1="242" y1="250" x2="258" y2="250" opacity="0.5"  stroke="]]..aU..[[" stroke-width="2"/>]]elseif bB=='box'then svg=svg..[[<rect x="237" y="237" width="26" height="26" style="fill: rgba(0,0,0,0); stroke: ]]..aU..[[; stroke-width: 2"/>]]end;svg=svg..[[<text x="50%" y ="47%" style="text-anchor: middle; fill: ]]..aU..[[; font-family: Arial, sans-serif; font-size: 14px;">]]..(bD or'')..[[</text><text x="50%" y ="55%" style="text-anchor: middle; fill: ]]..aU..[[; font-family: Arial, sans-serif; font-size: 14px;">]]..(bE or'')..[[</text></svg>]]return svg end;local function bI(bC,aU,bD,bE)return bA('circle',bC,aU,bD,bE)end;local function bJ(bC,aU)return bA('cross',bC,aU)end;local function bK(construct)local bL=vec3(construct.getWorldPosition())local bu=br(bL,10^7)local bM=''for aT,bC in pairs(bu)do bM=bM..bI(bC,"#cc8899",aT)end;return bM end;local function bN(construct)local bL=vec3(construct.getWorldPosition())local ay=require('atlas')local bM=''for z,aW in pairs(ay[0])do if aW.type[1]=="Planet"or aW.isSanctuary==true then local aY=math.floor((vec3(aW.center)-bL):len()/10^3/200).."su"bM=bM..bI(vec3(aW.center),"#f9e076",aW.name[1],aY)end end;return bM end;local function bO(bq)local aU=bq.isPvP and"#72ff5b"or"#FF5B72"local bP=bq.isPvP and"Safe Zone"or"PVP"return bI(bq.PvpBorderPos,aU,bP,aX(bq.PvpBorderDist))end;local function bQ(construct,aY)local bR=vec3(construct.getWorldVelocity()):normalize()local bS=vec3(construct.getWorldForward()):normalize()local aM=vec3(construct.getWorldPosition())local bT=aM+bS*aY;local bU=aM-bS*aY;local bV=aM+bR*aY;local bW=aM-bR*aY;local bX='#ccc'local bY='#a11'local bM=bI(bV,bX)..bI(bW,bY)..bJ(bT,bX)..bJ(bU,bY)return bM end;local function bZ()local bM=''for aT,ax in pairs(aN)do local aM,aU=vec3(ax[1]),ax[2]local aY=(aM-vec3(construct.getWorldPosition())):len()bM=bM..bA('box',aM,aU,aT,aX(aY))end;return bM end;local function b_(bq)local bM=''bM=bM..bK(construct)bM=bM..bN(construct)bM=bM..bQ(construct,10^7)bM=bM..bO(bq)bM=bM..bI(bq.closestPipe.point,'#ccc','PIPE',aX(bq.closestPipe.dist))bM=bM..bZ(construct)return bM end;local function c0(c1,v,c2,c3)local c4='-'c3=c3 or'█'local c5=math.floor(math.min(math.abs(math.max(v-1,0)),1)*c1+0.5)local c6=math.floor(math.min(math.abs(v),1)*c1+0.5)local c7;if v>=0 then c7='[</a><a class="'..(c2 or'')..'">'..string.rep(c3,c6-c5)..'</a><a class="red">'..string.rep(c3,c5)..'</a><a>'..string.rep(c4,c1-c6)..']'elseif v<0 then c7='['..string.rep(c4,c1-c6)..'</a><a class="red">'..string.rep(c3,c6).."</a><a>]"else c7='[</a><a class="red">'..string.rep('X',c1).."</a><a>]"end;return c7 end;local function c8()local c9=construct.getMass()local ca=0;local cb=construct.getPlayersOnBoard()local cc=construct.getPlayersOnBoardInVRStation()local cd=construct.getDockedConstructs()for z,ce in ipairs(cb)do ca=ca+construct.getBoardedPlayerMass(ce)end;for z,ce in ipairs(cc)do ca=ca+construct.getBoardedInVRStationAvatarMass(ce)end;for z,ce in ipairs(cd)do c9=c9+construct.getDockedConstructMass(ce)end;c9=c9+math.max(0,ca-20000)return c9 end;local function cf(cg)local ch=cg;while true do ch,k=string.gsub(ch,"^(-?%d+)(%d%d%d)",'%1,%2')if k==0 then break end end;return ch end;local function ci(cj)cj=cj*3.6;return cf(math.floor(cj))..' km/h'end;local function ck(cl)return string.format("%02d",math.floor(cl//60))..':'..string.format("%02d",math.floor(cl%60))end;local function cm(cl)if cl==-1 then return'ERR'elseif cl<60 then return math.floor(cl)..'s'elseif cl<60*60 then return math.floor(cl/60)..'m'elseif cl<60*60*24 then return math.floor(cl/(60*60))..'h'else return'1d+'end end;local function cn(co)if co<1000 then return math.floor(co)elseif co<1000*10 then return string.format("%.2fk",co/1000)elseif co<1000*100 then return string.format("%.1fk",co/1000)elseif co<1000*1000*10 then return string.format("%.2fm",co/1000000)elseif co<1000*200*100 then return string.format("%.1fm",co/1000000)else return math.ceil(co/1000000)..'m'end end;local function cp(s,cq)local v={}for j=1,#s do v[j]=s[j]/cq end;return v end;local cr=[[
                <style>
                .ui {
                    color: white;
                     font: Inconsolata, monospace;
                    font-family: monospace;
                    font-size: 0.75em;
                     font-weight: bold;
                     opacity: 0.75;
                    white-space: pre;
                     text-shadow: -1px -1px 0 #050, 1px -1px 0 #050, -1px 1px 0 #050, 1px 1px 0 #050;
                }
                .blue {
                    color: #5BD8FF;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                .red {
                    color: #FF5B72;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                .orange {
                    color: #fc934f;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                .yellow {
                    color: #fce94f;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                .green {
                    color: #72ff5b;
                     text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000, 1px 1px 0 #000;
                }
                </style>
                ]]local function cs()local aa=system.getUtcTime()local ct=unit.getThrottle()/100;local cu=by(ct*100)local cv=c8()local cw=string.format("%.1fg",vec3(construct.getWorldAcceleration()):len()/9.80665)local cx=json.decode(unit.getWidgetData()).spaceThrust;local cy=construct.getMaxThrustAlongAxis('space_engine',construct.getForward())[3]local cz=cy>0 and cx/cy or 0;local cA=by(cz*100)local cB=vec3(construct.getWorldVelocity()):len()local cC=construct.getMaxSpeed()local cD=cB/cC;local cE=brakeInput>0;local cF=spacefueltank_1~=nil and json.decode(spacefueltank_1.getWidgetData())or{}local cG=(cF.percentage~=nil and cF.percentage or 0)/100;local cH=by(cG*100)local cI=cF.timeLeft~=nil and(cF.timeLeft=='n/a'and 0 or cF.timeLeft)or-1;local cJ=cm(cI)local cK=construct.getMaxBrake()local cL=cB^2/(cK/cv)/2;local cM=cB~=0 and cL/cB*2 or 0;local cN=cB^2/((cK+cy)/cv)/2;local cO=cB~=0 and cN/cB*2 or 0;local cP=-1;if db_1~=nil and db_1.hasKey('targetSpeed')then cP=db_1.getIntValue('targetSpeed')end;local cQ=(cP or 0)/cC;local cR;if cP~=-1 then local cS=c0(20,cQ)local cT=string.format("%-14s",ci(cP))cR='targ speed '..cS..' '..cT else cR=string.rep(' ',48)end;local cU=c0(20,cD)..' '..string.format("%-14s",ci(cB))local cV=cE and'</a><a class="red">BRAKES ACTIVE</a><a>'or string.rep(' ',13)local cW=dampingOff==1 and'</a><a class="yellow">DAMPING OFF</a><a>'or string.rep(' ',11)return[[
                <style>
                .main-panel {
                   position: absolute;
                   top: 71vh;
                   left: 43vw;
                   font-size: 1em;
                }
                </style>
                <div class="ui main-panel"><a>
                 ___              WT HUD v0.6.4                 ___
                |                                                  |
                | ]]..cR..[[ |
                |      speed ]]..cU..[[ |
                                          max speed ]]..ci(cC)..[[ 
                    throttle ]]..c0(20,ct)..' '..cu..[[%
                      thrust ]]..c0(20,cz)..' '..cA..'% ('..cw..[[)
                        fuel ]]..c0(20,cG)..' '..cH..'% ('..cJ..[[)
                |  brake dist ]]..string.format('%-8s','['..aX(cL)..']')..[[  ]]..string.format('%-8s','('..aX(cN)..')')..[[     ]]..cV..[[ |
                |  brake time []]..ck(cM)..[[]  (]]..ck(cO)..[[)         ]]..cW..[[ |
                |___                                            ___|
                </a></div>
                ]]end;local function cX(bu)local bz=10;local cY={}local cZ={' ','▄','█'}for z,c_ in ipairs(bu)do local d0={}local d1=math.floor(c_*bz)for z=1,d1 do table.insert(d0,cZ[#cZ])end;if d1<bz then table.insert(d0,cZ[math.floor(c_*bz%1*(#cZ-1)+0.5)+1])end;for z=1,bz-d1+1 do table.insert(d0,cZ[1])end;table.insert(cY,d0)end;local d2={}for j=bz,1,-1 do local d0=''for bj=1,#bu do d0=d0 ..cY[bj][j]end;table.insert(d2,d0)end;return d2 end;local function d3(c_)local d0={'','','','','','','','','',''}local d4=11-(math.floor(c_*9+0.5)+1)d0[d4]=math.floor(c_*100+0.5)..'%'return d0 end;local function d5(d6,d7)local c_={}for j=1,#d6,math.floor(#d6/20)do table.insert(c_,d6[j])end;c_[#c_]=d7;local d8=cX(c_)local d9=d3(d7)return d8,d9 end;local function da(cj)cj=cj or 5;local db={'|','/','|','\\'}local d4=math.floor(system.getUtcTime()*cj%#db)+1;return db[d4]end;local function dc()local aa=system.getUtcTime()local dd=core.getMaxCoreStress()-core.getCoreStress()local de=core.getMaxCoreStress()local df=de>0 and dd/de or 0;local dg=by(df*100)local dh=shield.getShieldHitpoints()local di=shield.getMaxShieldHitpoints()local dj=dh/di;local dk=by(dj*100)local dl=cp(shield.getResistances(),shield.getResistancesPool())local dm=shield.getResistancesCooldown()local dn=shield.getResistancesMaxCooldown()local dp=dm/dn;local dq=shield.getVentingCooldown()local dr=shield.getVentingMaxCooldown()local ds=dq/dr;local d=wtShield.getStressRatio()local f=wtShield.getLastHitTimes()local dt={aa-f[1],aa-f[2],aa-f[3],aa-f[4]}local autoRes=wtShield.getAutoRes()local p=wtShield.getShieldHistory()local du=''if df<0.5 then du='yellow'elseif df<0.2 then du='red'end;local dv=c0(20,df,du)local dw=string.format('%-5s',dg..'%')local a4=shield.isVenting()local dx=''if a4 then dx='yellow'elseif shield.isActive()==0 then dx='red'end;local dy=''if dj<0.5 then dy='yellow'elseif dj<0.2 then dy='red'end;shieldStatusStr=shield.isActive()and' ONLINE'or'OFFLINE'local dz,d9=d5(p,dj)for j=1,#dz do dz[j]='</a><a class="'..dy..'">'..dz[j]..'</a><a>'end;local dA={}for j,b4 in ipairs(dl)do dA[j]=c0(10,b4,'blue')..string.format('%4s',math.floor(b4*100+0.5)..'%')end;local dB={}for j,b4 in ipairs(d)do dB[j]=c0(10,b4,'red')..string.format('%4s',math.floor(b4*100+0.5)..'%')end;local dC=autoRes and''or'yellow'local dD='</a><a class="'..dC..'">'..wtShield.getAutoResModeStr()..'</a><a>'local dE=c0(20,dp)local dF=string.format('%-11s',dm==0 and'READY'or ck(dm))local dG=a4 and c0(20,1,'yellow',da())or c0(20,ds)local dH=string.format('%-11s',a4 and'IN PROGRESS'or(dq==0 and'READY'or ck(dq)))return[[
                <style>
                .shield-panel {
                    position: absolute;
                    top: 2vh;
                    left: 2vw;
                    font-size: 0.75em;
                }
                </style>
                <div class="ui shield-panel"><a>
                 ___                                        ___
                | ]]..string.format('%20s',cn(dd))..[[ / ]]..string.format('%-21s',cn(de))..[[ |
                |       CCS ]]..dv..[[ ]]..string.format('%-11s',cn(dg)..'%')..[[ |
                |                                              |        
                  ]]..string.format('%20s',cn(dh))..[[ / ]]..string.format('%-21s',cn(di))..[[ 
                     </a><a class="]]..dx..[[">SHIELD</a><a> |]]..dz[1]..[[| ]]..d9[1]..[[        
                    </a><a class="]]..dx..[[">]]..shieldStatusStr..[[</a><a> |]]..dz[2]..[[| ]]..d9[2]..[[ 
                            |]]..dz[3]..[[| ]]..d9[3]..[[ 
                            |]]..dz[4]..[[| ]]..d9[4]..[[ 
                            |]]..dz[5]..[[| ]]..d9[5]..[[ 
                            |]]..dz[6]..[[| ]]..d9[6]..[[ 
                            |]]..dz[7]..[[| ]]..d9[7]..[[ 
                            |]]..dz[8]..[[| ]]..d9[8]..[[ 
                            |]]..dz[9]..[[| ]]..d9[9]..[[ 
                            |]]..dz[10]..[[| ]]..d9[10]..[[ 

                                 ]]..dA[2]..[[ 
                                 ]]..dB[2]..[[ 
                                       EM
                  ]]..dA[1]..[[  AM    KI  ]]..dA[3]..[[ 
                  ]]..dB[1]..[[     TH     ]]..dB[3]..[[ 
                                 ]]..dA[4]..[[ 
                                 ]]..dB[4]..[[ 
                  (Auto: ]]..dD..[[)
                |      RES  ]]..dE..[[ ]]..dF..[[ |
                |     VENT  ]]..dG..[[ ]]..dH..[[ |
                |___                                        ___|
                </a></div>
                    ]]end;local function dI(bq)local function dJ(aT)return aT:gsub("Asteroid ","A"):gsub("Moon ","M"):sub(1,11)end;local bP=bq.isPvP and'SAFE ZONE'or' PVP ZONE'return[[
                <style>
                .position-panel {
                    position: absolute;
                    top: 10vh;
                    left: 85vw;
                    font-size: 0.9em;
                }
                </style>
                <div class="ui position-panel"><a>
                 ___                ___
                |                      |
                |  ]]..bP..[[  ]]..string.format('%7s',aX(bq.PvpBorderDist))..[[  |
                   ]]..string.format('%11s',dJ(bq.closestBody.body.name[1]))..[[ ]]..string.format('%6s',aX(bq.closestBody.dist))..[[ 
                 
                 ]]..string.format('%11s',dJ(bq.closestPipe.body1.name[1]))..[[-]]..string.format('%-11s',dJ(bq.closestPipe.body2.name[1]))..[[ 
                |  PIPE        ]]..string.format('%7s',aX(bq.closestPipe.dist))..[[ |
                |___                ___|
                </a></div>
                ]]end;local function dK()return[[
                    <style>
                    .helper {
                        width: 26em;
                        padding: 2px;
                        position:fixed;
                        top:5vh;
                        left:1vw;
                        text-align: left;
                        background:  #2C2F33;
                        color: #FFFFFF;
                        font-family: "Times New Roman", Times, serif;
                        font-size: 0.9em;
                        border-radius: 5px;
                        border: 2px solid black;    
                    }
                    </style>
                    <div class="helper">
                                WTHud v0.6.4<br>
                                ]]..core.getConstructName()..[[ - ]]..core.getConstructId()..[[<br><br>
                                Alt+1:        Toggle Auto-Res<br>
                                Alt+2:        Toggle Rotational Damping<br>
                                Alt+3:        Toggle AR Compass<br>
                                Alt+4:        Toggle AR Gunner<br>
                                Alt+Shift+8:  Toggle Shield<br>
                                Alt+9:        Toggle Venting<br>
                                Shift+Arrows: Manual Resistances<br>
                                Ctrl+Space:   Hold Brakes<br>
                    </div>
                    ]]end;local function dL()local bq=aZ(vec3(construct.getWorldPosition()))local dM=lshiftInput and dK()or''local dN=showARCompass and b_(bq)or''return cr..cs()..dc()..dI(bq)..dM..dN end;function updateHud()system.setScreen(dL())end
    
        onTimer:
            args: ["wtShieldTick"]
            lua: |
                wtShield.onTick()
    system:
        onUpdate:
            lua: |
                Nav:update()
                updateHud()
                wtMonitor.onUpdate()
        onFlush:
            lua: |
                local a=0.8;local b=1;local c=1.5;local d=3;local e=1;local f=false;local g=2;local h=true;local i=2;local j=2;a=math.max(a,0.01)b=math.max(b,0.01)c=math.max(c,0.01)j=math.max(j,0.01)d=math.max(d,0.01)e=math.max(e,0.01)g=math.max(g,0.01)i=math.max(i,0.01)local k=pitchInput+system.getControlDeviceForwardInput()local l=rollInput+system.getControlDeviceYawInput()local m=yawInput-system.getControlDeviceLeftRightInput()local n=brakeInput;local o=vec3(core.getWorldVertical())local p=vec3(construct.getWorldOrientationUp())local q=vec3(construct.getWorldOrientationForward())local r=vec3(construct.getWorldOrientationRight())local s=vec3(construct.getWorldVelocity())local t=vec3(construct.getWorldVelocity()):normalize()local u=getRoll(o,q,r)local v=math.abs(u)local w=utils.sign(u)local x=1;local y=0;local z=1;local A=vec3(construct.getWorldAngularVelocity())local B;local C;if dampingOff==1 and k==0 and l==0 and m==0 then B=A else j=10;if maxAngularSpeed~=0 then C=math.min(construct.getMaxAngularSpeed(),maxAngularSpeed)else C=construct.getMaxAngularSpeed()end;B=(k*r+l*q+m*p):normalize()*C end;local D=j*(B-A)local E=vec3(construct.getWorldAirFrictionAngularAcceleration())D=D-E;Nav:setEngineTorqueCommand('torque',D,x,'airfoil, torque2, torque','','',z)local F=-n*(d*s+e*t)Nav:setEngineForceCommand('brake',F)local G=''local H=vec3()local I=false;local J='thrust analog longitudinal'local K=Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)if K==axisCommandType.byThrottle then local L=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(J,axisCommandId.longitudinal)Nav:setEngineForceCommand(J,L,x)elseif K==axisCommandType.byTargetSpeed then local L=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)G=G..' , '..J;H=H+L;if Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)==0 or Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal)<-Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal)*0.5 then I=true end end;local M='thrust analog lateral'local N=Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)if N==axisCommandType.byThrottle then local O=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(M,axisCommandId.lateral)Nav:setEngineForceCommand(M,O,x)elseif N==axisCommandType.byTargetSpeed then local P=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)G=G..' , '..M;H=H+P end;local Q='thrust analog vertical'local R=Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)if R==axisCommandType.byThrottle then local S=Nav.axisCommandManager:composeAxisAccelerationFromThrottle(Q,axisCommandId.vertical)Nav:setEngineForceCommand(Q,S,x,'airfoil','ground','',z)elseif R==axisCommandType.byTargetSpeed then local T=Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)G=G..' , '..Q;H=H+T end;if H:len()>constants.epsilon then if brakeInput~=0 or I or math.abs(t:dot(q))<0.95 then G=G..', brake'end;Nav:setEngineForceCommand(G,H,y,'','','',z)end;Nav:setBoosterCommand('rocket_engine')
        actionStart:
            args: [forward]
            lua: pitchInput = pitchInput - 1
        actionStop:
            args: [forward]
            lua: pitchInput = pitchInput + 1
        actionStart:
            args: [backward]
            lua: pitchInput = pitchInput + 1
        actionStop:
            args: [backward]
            lua: pitchInput = pitchInput - 1
        actionStart:
            args: [left]
            lua: rollInput = rollInput - 1
        actionStop:
            args: [left]
            lua: rollInput = rollInput + 1
        actionStart:
            args: [right]
            lua: rollInput = rollInput + 1
        actionStop:
            args: [right]
            lua: rollInput = rollInput - 1
        actionStart:
            args: [yawright]
            lua: yawInput = yawInput - 1
        actionStop:
            args: [yawright]
            lua: yawInput = yawInput + 1
        actionStart:
            args: [yawleft]
            lua: yawInput = yawInput + 1
        actionStop:
            args: [yawleft]
            lua: yawInput = yawInput - 1
        actionStart:
            args: [brake]
            lua: brakeInput = 1
        actionStop:
            args: [brake]
            lua: brakeInput = brakeInput - 1
        actionStart:
            args: [booster]
            lua: Nav:toggleBoosters()
        actionStart:
            args: [stopengines]
            lua: |
                if unit.getThrottle() == 0 then
                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 100)
                else
                    Nav.axisCommandManager:setThrottleCommand(axisCommandId.longitudinal, 0)
                end
        actionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateThrottleCommand(axisCommandId.longitudinal, 0.05)
        actionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateThrottleCommand(axisCommandId.longitudinal, -0.05)
        actionStart:
            args: [option1]
            lua: |
                wtShield.toogleAutoRes()
        actionStart:
            args: [option2]
            lua: |
                dampingOff = 1 - dampingOff
        actionStart:
            args: [option3]
            lua: |
                showARCompass = not showARCompass
        actionStart:
            args: [option8]
            lua: |
                if lshiftInput then 
                    shield.toggle()
                end
        actionStart:
            args: [option9]
            lua: |
                if shield.isVenting() == 1 then 
                    shield.stopVenting()
                else
                    shield.startVenting()
                end
        actionStart:
            args: [lshift]
            lua: |
                lshiftInput = true
        actionStop:
            args: [lshift]
            lua: |
                lshiftInput = false
                if manualResToApply then 
                    wtShield.manualOverride(manualResToApply)
                    manualResToApply = nil
                end
        actionStart:
            args: [strafeleft]
            lua: |
                if lshiftInput then
                    if not manualResToApply then manualResToApply = {0,0,0,0} end
                    manualResToApply[1] = manualResToApply[1] + 1
                else
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
                end
        actionStop:
            args: [strafeleft]
            lua: |
                if unit.getAxisCommandValue(1) == -1 then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)
                end
        actionStart:
            args: [up]
            lua: |
                if lshiftInput then
                    if not manualResToApply then manualResToApply = {0,0,0,0} end
                    manualResToApply[2] = manualResToApply[2] + 1
                elseif brakeInput == 1 then
                    brakeInput = 2
                else
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
                end
        actionStop:
            args: [up]
            lua: |
                if unit.getAxisCommandValue(2) == 1 then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                end
        actionStart:
            args: [straferight]
            lua: |
                if lshiftInput then
                    if not manualResToApply then manualResToApply = {0,0,0,0} end
                    manualResToApply[3] = manualResToApply[3] + 1
                else
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
                end
        actionStop:
            args: [straferight]
            lua: |
                if unit.getAxisCommandValue(1) == 1 then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)
                end
        actionStart:
            args: [down]
            lua: |
                if lshiftInput then
                    if not manualResToApply then manualResToApply = {0,0,0,0} end
                    manualResToApply[4] = manualResToApply[4] + 1
                else
                    Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
                end
        actionStop:
            args: [down]
            lua: |
                if unit.getAxisCommandValue(2) == -1 then
                    Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                end
        inputText(text):
            lua: |
                onText(text)
    shield:
        down():
            lua: |
                wtShield.onDown()
        venting(active, restoredHitpoints):
            lua: |
                wtShield.onVentingEvent(active, restoredHitpoints)
        absorbed(hitpoints, hitpointsRaw):
            lua: |
                wtShield.onAbsorb(hitpoints, hitpointsRaw)
